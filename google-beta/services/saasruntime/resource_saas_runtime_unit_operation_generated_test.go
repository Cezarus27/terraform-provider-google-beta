// Copyright (c) HashiCorp, Inc.
// SPDX-License-Identifier: MPL-2.0

// ----------------------------------------------------------------------------
//
//     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
//
// ----------------------------------------------------------------------------
//
//     This file is automatically generated by Magic Modules and manual
//     changes will be clobbered when the file is regenerated.
//
//     Please read more about how to change this file in
//     .github/CONTRIBUTING.md.
//
// ----------------------------------------------------------------------------

package saasruntime_test

import (
	"fmt"
	"strings"
	"testing"

	"github.com/hashicorp/terraform-plugin-testing/helper/resource"
	"github.com/hashicorp/terraform-plugin-testing/terraform"

	"github.com/hashicorp/terraform-provider-google-beta/google-beta/acctest"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/envvar"
	"github.com/hashicorp/terraform-provider-google-beta/google-beta/tpgresource"
	transport_tpg "github.com/hashicorp/terraform-provider-google-beta/google-beta/transport"
)

func TestAccSaasRuntimeUnitOperation_saasRuntimeUnitOperationBasicExample(t *testing.T) {
	t.Parallel()
	acctest.BootstrapIamMembers(t, []acctest.IamMember{
		{
			Member: "serviceAccount:service-{project_number}@gcp-sa-saasservicemgmt.iam.gserviceaccount.com",
			Role:   "roles/saasservicemgmt.serviceAgent",
		},
	})

	context := map[string]interface{}{
		"billing_account": envvar.GetTestBillingAccountFromEnv(t),
		"org_id":          envvar.GetTestOrgFromEnv(t),
		"project":         envvar.GetTestProjectFromEnv(),
		"project_number":  envvar.GetTestProjectNumberFromEnv(),
		"random_suffix":   acctest.RandString(t, 10),
	}

	acctest.VcrTest(t, resource.TestCase{
		PreCheck:                 func() { acctest.AccTestPreCheck(t) },
		ProtoV5ProviderFactories: acctest.ProtoV5ProviderBetaFactories(t),
		CheckDestroy:             testAccCheckSaasRuntimeUnitOperationDestroyProducer(t),
		Steps: []resource.TestStep{
			{
				Config: testAccSaasRuntimeUnitOperation_saasRuntimeUnitOperationBasicExample(context),
			},
			{
				ResourceName:            "google_saas_runtime_unit_operation.provision_unit_operation",
				ImportState:             true,
				ImportStateVerify:       true,
				ImportStateVerifyIgnore: []string{"annotations", "conditions", "error_category", "etag", "labels", "location", "state", "terraform_labels", "unit_operation_id", "update_time"},
			},
		},
	})
}

func testAccSaasRuntimeUnitOperation_saasRuntimeUnitOperationBasicExample(context map[string]interface{}) string {
	return acctest.Nprintf(`
locals {
  location          = "us-east1"
  tenant_project_id = "tenant%{random_suffix}"
}

resource "google_saas_runtime_saas" "example_saas" {
  provider = google-beta
  saas_id  = "tf-test-example-saas%{random_suffix}"
  location = local.location

  locations {
    name = local.location
  }
}

resource "google_saas_runtime_unit_kind" "cluster_unit_kind" {
  provider        = google-beta
  location        = local.location
  unit_kind_id    = "tf-test-vm-unitkind%{random_suffix}"
  saas            = google_saas_runtime_saas.example_saas.id
  default_release = "projects/%{project}/locations/${local.location}/releases/tf-test-example-release%{random_suffix}"
}

resource "google_saas_runtime_release" "example_release" {
  provider   = google-beta
  location   = local.location
  release_id = "tf-test-example-release%{random_suffix}"
  unit_kind  = google_saas_runtime_unit_kind.cluster_unit_kind.id
  blueprint {
    package = "us-central1-docker.pkg.dev/ci-test-project-188019/test-repo/tf-test-easysaas-alpha-image@sha256:7992fdbaeaf998ecd31a7f937bb26e38a781ecf49b24857a6176c1e9bfc299ee"
  }
}

resource "google_saas_runtime_unit" "example_unit" {
  provider  = google-beta
  location  = local.location
  unit_id   = "tf-test-example-unit%{random_suffix}"
  unit_kind = google_saas_runtime_unit_kind.cluster_unit_kind.id
}

resource "google_project" "tenant_project" {
  provider        = google-beta
  project_id      = local.tenant_project_id
  name            = local.tenant_project_id
  billing_account = "%{billing_account}"
  org_id          = "%{org_id}"
  deletion_policy = "DELETE"
}

resource "google_project_service" "saas_services" {
  provider                   = google-beta
  project                    = google_project.tenant_project.project_id
  service                    = "compute.googleapis.com"
  disable_dependent_services = true
}

resource "google_service_account" "actuation_service_account" {
  provider     = google-beta
  account_id   = "actuator%{random_suffix}"
  display_name = "SaaS Actuation Service Account"
}

resource "google_project_iam_member" "tenant_config_admin" {
  provider = google-beta
  project  = google_project.tenant_project.project_id
  role     = "roles/config.admin"
  member   = "serviceAccount:${google_service_account.actuation_service_account.email}"
}

resource "google_project_iam_member" "tenant_storage_admin" {
  provider = google-beta
  project  = google_project.tenant_project.project_id
  role     = "roles/storage.admin"
  member   = "serviceAccount:${google_service_account.actuation_service_account.email}"
}

resource "google_project_iam_member" "tenant_compute_admin" {
  provider = google-beta
  project  = google_project.tenant_project.project_id
  role     = "roles/compute.admin"
  member   = "serviceAccount:${google_service_account.actuation_service_account.email}"
}

resource "google_service_account_iam_member" "actuation_token_creator" {
  provider           = google-beta
  service_account_id = google_service_account.actuation_service_account.name
  role               = "roles/iam.serviceAccountTokenCreator"
  member             = "serviceAccount:service-%{project_number}@gcp-sa-saasservicemgmt.iam.gserviceaccount.com"
}

resource "google_saas_runtime_unit_operation" "provision_unit_operation" {
  provider          = google-beta
  depends_on        = [google_project_iam_member.tenant_config_admin, google_project_iam_member.tenant_storage_admin, google_project_iam_member.tenant_compute_admin, google_service_account_iam_member.actuation_token_creator, google_project_service.saas_services]
  location          = local.location
  unit_operation_id = "tf-test-provision-unit-operation%{random_suffix}"
  unit              = google_saas_runtime_unit.example_unit.id
  wait_for_completion = true

  provision {
    release = google_saas_runtime_release.example_release.id
    input_variables {
      variable = "tenant_project_id"
      value    = google_project.tenant_project.project_id
      type     = "STRING"
    }
    input_variables {
      variable = "tenant_project_number"
      value    = google_project.tenant_project.number
      type     = "INT"
    }
    input_variables {
      variable = "zone"
      value    = "us-central1-a"
      type     = "STRING"
    }
    input_variables {
      variable = "instance_name"
      value    = "terraform-test-instance"
      type     = "STRING"
    }
    input_variables {
      variable = "actuation_sa"
      value    = google_service_account.actuation_service_account.email
      type     = "STRING"
    }
  }
  labels = {
    "label-one" : "foo"
  }
  annotations = {
    "annotation-one" : "bar"
  }
}

resource "google_saas_runtime_unit_operation" "noop_upgrade_unit_operation" {
  provider          = google-beta
  depends_on        = [google_saas_runtime_unit_operation.provision_unit_operation]
  location          = local.location
  unit_operation_id = "tf-test-upgrade-unit-operation%{random_suffix}"
  unit              = google_saas_runtime_unit.example_unit.id
  wait_for_completion = true

  upgrade {
    release = google_saas_runtime_release.example_release.id
    input_variables {
      variable = "tenant_project_id"
      value    = google_project.tenant_project.project_id
      type     = "STRING"
    }
    input_variables {
      variable = "tenant_project_number"
      value    = google_project.tenant_project.number
      type     = "INT"
    }
    input_variables {
      variable = "zone"
      value    = "us-central1-a"
      type     = "STRING"
    }
    input_variables {
      variable = "instance_name"
      value    = "terraform-test-instance"
      type     = "STRING"
    }
    input_variables {
      variable = "actuation_sa"
      value    = google_service_account.actuation_service_account.email
      type     = "STRING"
    }
  }
}

resource "google_saas_runtime_unit_operation" "deprovision_operation" {
  provider          = google-beta
  depends_on        = [google_saas_runtime_unit_operation.noop_upgrade_unit_operation]
  location          = local.location
  unit_operation_id = "tf-test-deprovision-unit-operation%{random_suffix}"
  unit              = google_saas_runtime_unit.example_unit.id
  wait_for_completion = true
  deprovision {}
}
`, context)
}

func testAccCheckSaasRuntimeUnitOperationDestroyProducer(t *testing.T) func(s *terraform.State) error {
	return func(s *terraform.State) error {
		for name, rs := range s.RootModule().Resources {
			if rs.Type != "google_saas_runtime_unit_operation" {
				continue
			}
			if strings.HasPrefix(name, "data.") {
				continue
			}

			config := acctest.GoogleProviderConfig(t)

			url, err := tpgresource.ReplaceVarsForTest(config, rs, "{{SaasRuntimeBasePath}}projects/{{project}}/locations/{{location}}/unitOperations/{{unit_operation_id}}")
			if err != nil {
				return err
			}

			billingProject := ""

			if config.BillingProject != "" {
				billingProject = config.BillingProject
			}

			_, err = transport_tpg.SendRequest(transport_tpg.SendRequestOptions{
				Config:    config,
				Method:    "GET",
				Project:   billingProject,
				RawURL:    url,
				UserAgent: config.UserAgent,
			})
			if err == nil {
				return fmt.Errorf("SaasRuntimeUnitOperation still exists at %s", url)
			}
		}

		return nil
	}
}
